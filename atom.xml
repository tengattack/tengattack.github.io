<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>tengattack</title>
  <subtitle></subtitle>
  <link href="/atom.xml" rel="self" />

  <link href="http://blog.tengattack.com/" />
  <updated>2017-04-23T07:09:01.085Z</updated>
  <id>http://blog.tengattack.com/</id>

  <author>
    <name>tengattack</name>
  </author>

  <generator uri="http://hane.io/">hanejs</generator>

  <entry>
    <title>「碧之轨迹」通关有感</title>
    <link href="http://blog.tengattack.com/2015/08/16/ao-no-kiseki/" />
    <id>http://blog.tengattack.com/2015/08/16/ao-no-kiseki/</id>
    <published>2015-08-16T13:51:45Z</published>
    <updated>2015-08-16T13:51:45Z</updated>

    <content type="html"><![CDATA[<p>拖了好几年的游戏终于通关了。<del datetime="2015-08-16T13:34:25+00:00">长草的博客终于更新了</del><br />
<a href="/uploads/2015/08/屏幕快照-2015-08-12-下午4.02.41.png"><img src="/uploads/2015/08/屏幕快照-2015-08-12-下午4.02.41.png" alt="屏幕快照 2015-08-12 下午4.02.41" width="1072" height="678" class="alignnone size-full wp-image-1198" /></a></p>
<p>还记得当年初中的时候开始玩空之轨迹。记得当时是我哥哥在玩，我在一边看着，瞬间就被这个有着很有趣的世界观的作品吸引了（把电全部换成导力）。那时空轨 3rd 还没出，自己通关完空轨前两作的时候，真的是非常的感动。后来玩了伊苏，虽然战斗系统我更喜欢伊苏的（其实我更喜欢没有战斗系统的，比如大部分 gal），但是给我的感觉更是突出了空轨的剧情。</p>
<p>零轨和碧轨在继承了空轨的世界观之上，给我的更多是惊讶，这剧情怎么就这么展开了？这样的感觉。<br />
当时玩完零轨的时候还没啥感觉，知道后来碧轨开始逐步揭开真相的时候，真是停不下来！（可恶啊，这战斗系统好烦，这收集要素好烦，不去收集又怕少看了什么剧情）</p>
<p><a href="/uploads/2015/08/屏幕快照-2015-08-11-下午5.13.57副本.png"><img src="/uploads/2015/08/屏幕快照-2015-08-11-下午5.13.57副本.png" alt="屏幕快照 2015-08-11 下午5.13.57副本" width="1072" height="678" class="alignnone size-full wp-image-1199" /></a></p>
<p>-闪之轨迹，我终于来了-</p>
]]></content>
    <summary type="html"><![CDATA[<p>拖了好几年的游戏终于通关了。<del datetime="2015-08-16T13:34:25+00:00">长草的博客终于更新了</del><br></br>
<a href="/uploads/2015/08/屏幕快照-2015-08-12-下午4.02.41.png"><img src="/uploads/2015/08/屏幕快照-2015-08-12-下午4.02.41.png" alt="屏幕快照 2015-08-12 下午4.02.41" width="1072" height="678" class="alignnone size-full wp-image-1198" /></a></p>]]></summary>

    <category term="galgame" scheme="http://blog.tengattack.com/tags/galgame/" />
  </entry>
  <entry>
    <title>痛 Wafer</title>
    <link href="http://blog.tengattack.com/2015/03/07/ita-wafer/" />
    <id>http://blog.tengattack.com/2015/03/07/ita-wafer/</id>
    <published>2015-03-07T11:33:27Z</published>
    <updated>2015-03-07T11:33:27Z</updated>

    <content type="html"><![CDATA[<p>相信大家看过各种痛车痛笔记本之类的东西，但是痛 Water 想必没有见到过，这次给大家带来的是前一段时间用光刻机刻在 Wafer 上的 niconiconi~</p>
<p><a href="/uploads/2015/03/niconiconi1.jpg"><img src="/uploads/2015/03/niconiconi1.jpg" alt="niconiconi1" width="1126" height="854" class="alignnone size-full wp-image-1182" /></a><br />
<span id="more-1181"></span></p>
<p><a href="/uploads/2015/03/DSC_0034.jpg"><img src="/uploads/2015/03/DSC_0034.jpg" alt="DSC_0034" width="1920" height="1080" class="alignnone size-full wp-image-1184" /></a></p>
<p>上面这张图是带着光刻胶在电镜下的照片，去掉光刻胶是这样样子的：</p>
<p><a href="/uploads/2015/03/niconiconi2.jpg"><img src="/uploads/2015/03/niconiconi2.jpg" alt="niconiconi2" width="1069" height="849" class="alignnone size-full wp-image-1183" /></a></p>
<p>什么？你不知道什么是 Wafer ？就是这个：</p>
<p><a href="/uploads/2015/03/DSC_0036.jpg"><img src="/uploads/2015/03/DSC_0036.jpg" alt="DSC_0036" width="1280" height="720" class="alignnone size-full wp-image-1186" /></a></p>
<p><a href="/uploads/2015/03/DSC_4698-s.jpg"><img src="/uploads/2015/03/DSC_4698-s.jpg" alt="DSC_4698-s" width="1200" height="800" class="alignnone size-full wp-image-1185" /></a></p>
<p>Layout:<br />
<a href="/uploads/2015/03/wafer.png"><img src="/uploads/2015/03/wafer.png" alt="wafer" width="1062" height="811" class="alignnone size-full wp-image-1187" /></a></p>
<p><del datetime="2015-03-07T11:22:25+00:00">想想我真是无聊去弄了个这么个玩意</del></p>
]]></content>
    <summary type="html"><![CDATA[<p>相信大家看过各种痛车痛笔记本之类的东西，但是痛 Water 想必没有见到过，这次给大家带来的是前一段时间用光刻机刻在 Wafer 上的 niconiconi~</p>
]]></summary>

    <category term="device" scheme="http://blog.tengattack.com/tags/device/" />
  </entry>
  <entry>
    <title>Burger King 客户调查码深入</title>
    <link href="http://blog.tengattack.com/2015/01/29/burger-hacking/" />
    <id>http://blog.tengattack.com/2015/01/29/burger-hacking/</id>
    <published>2015-01-29T05:03:55Z</published>
    <updated>2015-01-30T10:15:35Z</updated>

    <content type="html"><![CDATA[<p>好久没有发博客，今天发生了一件非常有趣的事情，且听我从头道来。</p>
<p>这几天去外面吃饭，在某天吃汉堡王的时候，突然注意到他给的小票有这样的一个调查：<br />
<a href="/uploads/2015/01/burgerking-survey.jpg"><img src="/uploads/2015/01/burgerking-survey.jpg" alt="burgerking-survey" width="1130" height="720" class="alignnone size-full wp-image-1161" /></a></p>
<p><span id="more-1160"></span><br />
然后是因为和朋友一起来，那就正好填一下，拿点额外的东西吃也不错，还可以少买瓶可乐。</p>
<p>于是很开心的拿出了手机，开始填这个调查问卷。不过令我没想到的是，这里的选项机械重复，而且有超过20个页面需要填写，虽然有些页面的选项并不多，但是也比较令人不快。<br />
机智的我和朋友一讨论，我们发现我们必须要完成一个自动化工具来自动填写这个表单，然后给出他的验证码。</p>
<p>于是，第二天空闲的时候，我兴奋的完成了这个小工具，是可以部署在服务器上的BurgerKing的客户调查自动表单填写工具，输入调查码，等个半分钟就有结果了（这个是由于他们服务器网速太慢且页面较多，导致需要这么长时间的交互）。<br />
代码是公开的，感兴趣的可以移步github： <a href="https://github.com/tengattack/burgerking-bot" title="tengattack/burgerking-bot" target="_blank">https://github.com/tengattack/burgerking-bot</a></p>
<p>接下来便开始讲我们分析这个调查码与验证码之间联系的故事，如果觉得太长可以直接拖到文章最后看结论。</p>
<p>完成了这件事情之后，我们很满足的又去Burger King吃了顿晚餐。<br />
由于点餐我们又拿了几个这种小票，在吃的时候，我们发现这几个调查码是有一定规律的：<br />
<code><br />
2806011200802128<br />
3806011200802128<br />
5805011200802128<br />
9807011200702138<br />
0806011200201138<br />
</code><br />
可以看出，这几个调查码只有几位有差异，这也许是我们是在同一个时间段里拿到的。<br />
不过，由于这个调查码和验证码店员都是要输入店内的订餐机中的，而且为了需要应对在没有网络的情况，我们猜想，我们是否可以通过某种方法计算出这个验证码。<br />
我都可以想象出，当我拿到票的时候，直接掏出一支笔，把验证码写在纸上，然后告诉店员，完成了，不知他们的表情是什么样子的。</p>
<p>回来之后，我们便开始了测试。<br />
由于有了自动化的工具，我们一次测试10条数据，每一位从0～9进行变化，跑了16次。</p>
<p>在跑第一位的时候，我们有得出这样的数据(s v)：<br />
<code><br />
0807011200602168 63000917<br />
1807011200602168 63100917<br />
2807011200602168 63200917<br />
...<br />
7807011200602168 63700917<br />
8807011200602168 63800917<br />
9807011200602168 63900917<br />
</code><br />
我们一下就注意到，第一位和第三位是完全一致的，这给了我们莫大的信心，这告诉我们这个验证码非常有可能是可以算出来的！</p>
<p>于是乎，我们开始跑后面的位数。跑完后，我们得出以下结论（<strong>以下我们为了方便，简称调查码第x位为sx，验证码第x位为vx，如调查码第3位为s3</strong>）：</p>
<ul>
<li>s1对应v3</li>
<li>s2不影响验证码</li>
<li>s3只能是0,5，除此之外是无效的调查码，对验证码没有影响</li>
<li>s4对应v8，且影响验证码的第1,2位</li>
<li>s5只能是0</li>
<li>s6<strong>不能是0</strong></li>
<li>s7对应v7，且影响验证码的第5,6位</li>
<li>s8只能是2</li>
<li>s9对应v4，且影响验证码的第1,5,6位</li>
<li>s10只能是0,1,2,3</li>
<li>s11不影响验证码</li>
<li>s12只能是0</li>
<li>s13只能是1,2,3</li>
<li>s14只能是0,1,2</li>
<li>s15不影响验证码</li>
<li>s16只能是6,8,9</li>
</ul>
<p>到这里，我们已经找完了每一位对应验证码的关系，也许有相互影响作用的，但是我们暂时不考虑这个，先看看能不能找出不同位间的对应关系。<br />
我们发现，验证码是一共8位，其中验证码的3,4,7,8位分别直接对于调查码的1,9,7,4位。同时，还剩下验证码的1,2,5,6位与调查码的4,7,9位有关系，我们可以列出他们之间的关系（调查码 ->/~> 验证码，直接对应->、相关～>）：<br />
<code><br />
1 -> 3<br />
4 -> 8<br />
4 ~> 1,2<br />
7 -> 7<br />
7 ~> 5,6<br />
9 -> 4<br />
9 ~> 1,5,6<br />
</code></p>
<p>我们先看v2，因为它只与s4有关，我们简单的跑出一些的数据(s v | s4 v2)：<br />
<code><br />
2800011200802128 00200910 | 0 0<br />
2801011200802128 09200911 | 1 9<br />
2802011200802128 18200912 | 2 8<br />
...<br />
2807011200802128 63200917 | 7 3<br />
2808011200802128 72200918 | 8 2<br />
2809011200802128 81200919 | 9 1<br />
</code></p>
<p>这样把数据列出来，我们就直接看出来了： <code>(v2 + s4) % 10 = 0</code></p>
<p>接下来是v1，它与s4,s9有关，我们继续沿用上面的数据，更改一下s9跑出一些新数据(s v | s4 s9 v1)：<br />
<code><br />
2800011200802128 00200910 | 0 0 0<br />
2801011200802128 09200911 | 1 0 0<br />
2802011200802128 18200912 | 2 0 1<br />
...<br />
2807011200802128 63200917 | 7 0 6<br />
2808011200802128 72200918 | 8 0 7<br />
2809011200802128 81200919 | 9 0 8<br />
=================================<br />
2800011210802128 90210910 | 0 1 9<br />
2801011210802128 99210911 | 1 1 9<br />
2802011210802128 08211012 | 2 1 0<br />
...<br />
2807011210802128 53211017 | 7 1 5<br />
2808011210802128 62211018 | 8 1 6<br />
2809011210802128 71211019 | 9 1 7<br />
</code></p>
<p>咦，我们好像发现了些什么，继续修改s9(s v | s4 s9 v1)：<br />
<code><br />
2800011220802128 80221010 | 0 2 8<br />
2801011220802128 89221011 | 1 2 8<br />
2802011220802128 98221012 | 2 2 9<br />
...<br />
2807011220802128 43221117 | 7 2 4<br />
2808011220802128 52221118 | 8 2 5<br />
2809011220802128 61221119 | 9 2 6<br />
</code><br />
诶，好像可以猜出来了，应该是这样的一种计算方式：<br />
<code>v1 = ((s4 == 0) ? (10 - s9) : ((s4 - s9 - 1) < 0 ? (10 - (s4 - s9 - 1)) : (s4 - s9 - 1))) % 10</code><br />
我们可以适当简化一下：<br />
<code>v1 = ((s4 == 0 ? 1 : s4) - s9 + 9) % 10</code></p>
<p>然后就是v5,v6，它们与s7,s9有关，跑出数据(s v | s7 s9 v5 v6)：<br />
<code><br />
2800010200802128 00200000 | 0 0 0 0<br />
2800011200802128 00200910 | 1 0 0 9<br />
2800012200802128 00201820 | 2 0 1 8<br />
2800013200802128 00202730 | 3 0 2 7<br />
2800014200802128 00203640 | 4 0 3 6<br />
2800015200802128 00204550 | 5 0 4 5<br />
2800016200802128 00205460 | 6 0 5 4<br />
2800017200802128 00206370 | 7 0 6 3<br />
2800018200802128 00207280 | 8 0 7 2<br />
2800019200802128 00208190 | 9 0 8 1<br />
</code><br />
<code><br />
2800010210802128 90210000 | 0 1 0 0<br />
2800011210802128 90210910 | 1 1 0 9<br />
2800012210802128 90211820 | 2 1 1 8<br />
...<br />
2800017210802128 90216370 | 7 1 6 3<br />
2800018210802128 90217280 | 8 1 7 2<br />
2800019210802128 90218190 | 9 1 8 1<br />
</code><br />
噫！s9是0和1的时候不影响v5,v6！我们再看看s9为2,3的时候<br />
<code><br />
2800010220802128 80220100 | 0 2 0 1<br />
2800011220802128 80221010 | 1 2 1 0<br />
2800012220802128 80221920 | 2 2 1 9<br />
2800013220802128 80222830 | 3 2 2 8<br />
2800014220802128 80223740 | 4 2 3 7<br />
2800015220802128 80224650 | 5 2 4 6<br />
2800016220802128 80225560 | 6 2 5 5<br />
2800017220802128 80226470 | 7 2 6 4<br />
2800018220802128 80227380 | 8 2 7 3<br />
2800019220802128 80228290 | 9 2 8 2<br />
=========================<br />
2800010230802128 70230200 | 0 3 0 2<br />
2800011230802128 70231110 | 1 3 1 1<br />
2800012230802128 70232020 | 2 3 2 0<br />
2800013230802128 70232930 | 3 3 2 9<br />
2800014230802128 70233840 | 4 3 3 8<br />
2800015230802128 70234750 | 5 3 4 7<br />
2800016230802128 70235660 | 6 3 5 6<br />
2800017230802128 70236570 | 7 3 6 5<br />
2800018230802128 70237480 | 8 3 7 4<br />
2800019230802128 70238390 | 9 3 8 3<br />
</code></p>
<p>我们可以通过以上数据猜测：<br />
<code><br />
v5 = (s7 < (s9 == 0 ? 1 : s9)) ? s7 : s7 - 1
v6 = ((s9 == 0 ? 1 : s9) - s7 + 9) % 10
</code></p>
<p>至此，我们已经得出所有的验证码位数的公式：<br />
<code><br />
v1 = ((s4 == 0 ? 1 : s4) - s9 + 9) % 10<br />
v2 = (10 - s4) % 10<br />
v3 = s1<br />
v4 = s9<br />
v5 = (s7 < (s9 == 0 ? 1 : s9)) ? s7 : s7 - 1
v6 = ((s9 == 0 ? 1 : s9) - s7 + 9) % 10
v7 = s7
v8 = s4
</code></p>
<p><del datetime="2015-01-29T08:35:05+00:00">出来了，皆大欢喜～</del><br />
突然发现，v5,v6还会受到s4的影响，还需要一些调整。</p>
<p>然后我们经过一系列的数据分析，我们发现v5,v6还与s4有关，于是我们得到一个新的修正公式（(x,y)表示第x和第y位合并在一起的两位数）：<br />
<code><br />
v(5,6) = s(7,9) - Ceil((s(7,9) - (s4 == 0 ? 1 : s4) + 1) / 10)<br />
</code></p>
<p>大家可以试试我弄的在线的计算器： <a href="https://burger.bless.moe/">https://burger.bless.moe/</a></p>
]]></content>
    <summary type="html"><![CDATA[<p>好久没有发博客，今天发生了一件非常有趣的事情，且听我从头道来。</p>
<p>这几天去外面吃饭，在某天吃汉堡王的时候，突然注意到他给的小票有这样的一个调查：<br></br>
<a href="/uploads/2015/01/burgerking-survey.jpg"><img src="/uploads/2015/01/burgerking-survey.jpg" alt="burgerking-survey" width="1130" height="720" class="alignnone size-full wp-image-1161" /></a></p>]]></summary>

    <category term="web" scheme="http://blog.tengattack.com/tags/web/" />
    <category term="nodejs" scheme="http://blog.tengattack.com/tags/nodejs/" />
  </entry>
  <entry>
    <title>「ハーヴェストオーバーレイ」通关纪念</title>
    <link href="http://blog.tengattack.com/2014/10/19/harvest-overlay/" />
    <id>http://blog.tengattack.com/2014/10/19/harvest-overlay/</id>
    <published>2014-10-19T10:34:20Z</published>
    <updated>2014-10-19T12:36:55Z</updated>

    <content type="html"><![CDATA[<p>「ハーヴェストオーバーレイ」GIGA在2014年6月的新作<br />
官网 <a href="http://products.web-giga.com/harvest/" target="_blank">http://products.web-giga.com/harvest/</a></p>
<p><a href="/uploads/2014/10/bg01.jpg"><img src="/uploads/2014/10/bg01.jpg" alt="bg01" width="1600" height="1200" class="alignnone size-full wp-image-1107" /></a></p>
<p>之前一直想玩一下GIGA近未来设定的galgame，可惜之前的作品<a href="http://products.web-giga.com/materialbrave/" title="マテリアルブレイブ" target="_blank">「マテリアルブレイブ」</a>居然还附带RPG，简直不让人愉快的玩耍，而且还出了一次续作！<br />
不过好在现在GIGA的脑洞终于完了，回归正常的galgame。</p>
<p><span id="more-1103"></span></p>
<p><a href="/uploads/2014/10/00000001.jpg"><img src="/uploads/2014/10/00000001.jpg" alt="00000001" width="1137" height="640" class="alignnone size-full wp-image-1105" /></a></p>
<p>其实我玩这个游戏没太多理由，就是当时游戏还没出的时候扫游戏的时候偶然发现，然后看了下介绍，听了妹妹的语音，看妹妹的设定这么碉，就留了个心眼。<br />
<a href="/uploads/2014/10/chara_details_03.png"><img src="/uploads/2014/10/chara_details_03.png" alt="chara_details_03" width="540" height="810" class="alignnone size-full wp-image-1111" /></a><br />
<a href="/uploads/2014/10/chara_stand_03a.png"><img src="/uploads/2014/10/chara_stand_03a.png" alt="chara_stand_03a" width="600" height="800" class="alignnone size-full wp-image-1112" /></a><br />
妹妹这么棒，怎么能不推！</p>
<p>于是，在发售后，有源了，便下了个玩（好孩子还是买正版吧）。<br />
游戏一共4条线，リリア/澄/小町/(攻略任意一人之后)ゆうか<br />
<del datetime="2014-10-19T18:39:53+00:00">说是通关，其实小町线并没有通，因为小町没戳中我的萌点！</del></p>
<p>游戏包含共通线和三人的路线，最后就是深入事实真相的ゆうか线。<br />
故事讲述的背景是在2045年的时候AR技术已经发展到相当的高度，以及生体电脑尝试开始进行应用的初期。<br />
主要还是描述了一个非常美好的如梦般的未来的故事。</p>
<p>游戏中最精彩的还是ゆうか线(废话)，不过妹妹线也是超棒的！<br />
对于CG来说，人物立绘画的很好，质量很高，很精致，表情和服饰都画的很到位，女主那种ふあふあ的感觉表现的很到位，不过在特定场景中可能缺少一定的冲击力。CG来说整体不错，不过感觉布光稍微有点不足，感觉到处都很亮……<br />
音乐的话，在官网上有试听，感觉确实有种科技感和游戏感，至少在游戏中表现力不错，没有什么违和感。有几个曲子感觉相当棒，OP「Another Reality」和2nd OP<a href="https://www.youtube.com/watch?v=JVI6Dn0OiT0" target="_blank">「Lise and Truth」</a>感觉都超棒的！尤其是「Lise and Truth」播放的时候感觉超棒，也可能是受到了视频的影响，不过不管怎么说，音乐的质量挺不错。<br />
人物语音怎么说呢，就是一般的galgame的感觉吧。<br />
再说说游戏的系统，这游戏的设置超详细超复杂！感觉各种都可以设置，而且对触屏支持很好，多指操作什么都可以设置，让你非常想试试去摸摸屏幕 (能支持舌头的操作么)。</p>
<p>(剧透慎入)</p>
<p><strong>共通线</strong><br />
刚进入游戏没多久居然就出现fin了，简直吓尿。原来是男主玩的一个游戏fin了。<br />
<a href="/uploads/2014/10/00000002.jpg"><img src="/uploads/2014/10/00000002.jpg" alt="00000002" width="1137" height="640" class="alignnone size-large wp-image-1106" /></a></p>
<p>然后和女主ゆうか的相遇就是看到她在河边洗澡，挺老的梗了……另外这个地方好像还是个公众的场所……<br />
<a href="/uploads/2014/10/00000003.jpg"><img src="/uploads/2014/10/00000003.jpg" alt="00000003" width="1137" height="640" class="alignnone size-full wp-image-1113" /></a></p>
<p>以及澄、小町在游戏中第一次出现：<br />
<a href="/uploads/2014/10/00000012.jpg"><img src="/uploads/2014/10/00000012.jpg" alt="00000012" width="1137" height="640" class="alignnone size-full wp-image-1114" /></a><br />
<a href="/uploads/2014/10/00000016.jpg"><img src="/uploads/2014/10/00000016.jpg" alt="00000016" width="1137" height="640" class="alignnone size-full wp-image-1115" /></a></p>
<p>妹妹超棒！<br />
<a href="/uploads/2014/10/00000019.jpg"><img src="/uploads/2014/10/00000019.jpg" alt="00000019" width="1137" height="640" class="alignnone size-full wp-image-1116" /></a></p>
<p><a href="/uploads/2014/10/00000033.jpg"><img src="/uploads/2014/10/00000033.jpg" alt="00000033" width="1137" height="640" class="alignnone size-full wp-image-1117" /></a><br />
还有Cosplay！<br />
<a href="/uploads/2014/10/00000048.jpg"><img src="/uploads/2014/10/00000048.jpg" alt="00000048" width="1137" height="640" class="alignnone size-full wp-image-1118" /></a></p>
<p>简单来说共通线就是男主开始玩一个叫「ハーヴェスト・オンリアル」的奇怪游戏，游戏利用现有的AR技术，基于现实的人物场景进行游戏。<br />
然后男主在游戏过程中发现自己喜欢的人……</p>
<p><strong>リリア线</strong><br />
怎么说呢，リリア作为一个市长女儿的大小姐，自然家教较严，与男主相爱家里人反对，然后男主去争取的一条线吧，感觉没啥太大的特点，而且感觉具体的路线事件太少，没有具体表现出来。<br />
<a href="/uploads/2014/10/00000198.jpg"><img src="/uploads/2014/10/00000198.jpg" alt="00000198" width="1137" height="640" class="alignnone size-full wp-image-1121" /></a><br />
当时两人一起去看AR烟花，确立恋人关系。</p>
<p><a href="/uploads/2014/10/00000219.jpg"><img src="/uploads/2014/10/00000219.jpg" alt="00000219" width="1137" height="640" class="alignnone size-full wp-image-1122" /></a><br />
リリア被软禁，男主去寻找，被女仆所阻挡</p>
<p><a href="/uploads/2014/10/00000227.jpg"><img src="/uploads/2014/10/00000227.jpg" alt="00000227" width="1137" height="640" class="alignnone size-full wp-image-1123" /></a><br />
最后被认可，结局自然是美好的。</p>
<p><strong>澄线（妹线）</strong><br />
妹妹超棒，兄控，<del datetime="2014-10-19T19:35:43+00:00">胸部够大</del>，而且很聪明，程序开发者。<br />
妹线不仅讲了男主和妹妹之间的关系，小时候的羁绊什么的，还深入描述了妹妹和リリア之间的友情。<br />
毕竟是实妹，</p>
<p><a href="/uploads/2014/10/00000090.jpg"><img src="/uploads/2014/10/00000090.jpg" alt="00000090" width="1137" height="640" class="alignnone size-full wp-image-1125" /></a><br />
手铐Play……</p>
<p><a href="/uploads/2014/10/00000092.jpg"><img src="/uploads/2014/10/00000092.jpg" alt="00000092" width="1137" height="640" class="alignnone size-full wp-image-1126" /></a><br />
妹妹的房间，<del datetime="2014-10-19T19:35:43+00:00">妹妹你为何这么屌</del></p>
<p><a href="/uploads/2014/10/00000104.jpg"><img src="/uploads/2014/10/00000104.jpg" alt="00000104" width="1137" height="640" class="alignnone size-full wp-image-1127" /></a><br />
……</p>
<p><a href="/uploads/2014/10/00000119.jpg"><img src="/uploads/2014/10/00000119.jpg" alt="00000119" width="1137" height="640" class="alignnone size-full wp-image-1128" /></a><br />
男主回忆起小时候的约定</p>
<p><a href="/uploads/2014/10/00000161.jpg"><img src="/uploads/2014/10/00000161.jpg" alt="00000161" width="1137" height="640" class="alignnone size-full wp-image-1129" /></a><br />
和リリア解开误会，重新变回朋友，啊，真是太好了！</p>
<p><strong>小町线</strong><br />
没玩，就不作评论了。</p>
<p><strong>ゆうか线</strong><br />
ゆうか超萌，CV也很到位，有各种NETA，蛮有趣的，在2nd OP之后，故事渐渐深入，逐步了解一些事情的真相，甚至到了要让「ハーヴェスト」结束的话ゆうか必须消失才行。<br />
ゆうか是在设施里长大的，ゆうか小时候丧失了双亲，后来在设施里与持子相遇。<br />
ゆうか线后半主要是说持子想要一个大家都开心的世界，创造「乐园」，然后持子的另外两个里人格为了帮助她，连累ゆうか的事。</p>
<p><a href="/uploads/2014/10/00000232.jpg"><img src="/uploads/2014/10/00000232.jpg" alt="00000232" width="1137" height="640" class="alignnone size-full wp-image-1130" /></a><br />
去到ゆうか家里遇到另一位天才开发者，持子</p>
<p><a href="/uploads/2014/10/00000246.jpg"><img src="/uploads/2014/10/00000246.jpg" alt="00000246" width="1137" height="640" class="alignnone size-full wp-image-1131" /></a><br />
确立恋人关系，之后就到了2nd OP</p>
<p>男主与持子的另外两个人格相遇<br />
<a href="/uploads/2014/10/00000283.jpg"><img src="/uploads/2014/10/00000283.jpg" alt="00000283" width="1137" height="640" class="alignnone size-full wp-image-1135" /></a></p>
<p><a href="/uploads/2014/10/00000285.jpg"><img src="/uploads/2014/10/00000285.jpg" alt="00000285" width="1137" height="640" class="alignnone size-full wp-image-1136" /></a></p>
<p>最后Boss前，小町 vs 小町姐姐，リリア vs リリア家女仆<br />
<a href="/uploads/2014/10/00000298.jpg"><img src="/uploads/2014/10/00000298.jpg" alt="00000298" width="1137" height="640" class="alignnone size-full wp-image-1138" /></a></p>
<p><a href="/uploads/2014/10/00000299.jpg"><img src="/uploads/2014/10/00000299.jpg" alt="00000299" width="1137" height="640" class="alignnone size-full wp-image-1139" /></a></p>
<p><a href="/uploads/2014/10/00000303.jpg"><img src="/uploads/2014/10/00000303.jpg" alt="00000303" width="1137" height="640" class="alignnone size-full wp-image-1140" /></a><br />
去解救被困住的ゆうか</p>
<p><a href="/uploads/2014/10/00000304.jpg"><img src="/uploads/2014/10/00000304.jpg" alt="00000304" width="1137" height="640" class="alignnone size-full wp-image-1141" /></a><br />
为了保护持子和实现她的梦想，持子的两个里人格也是准备了很久。</p>
<p><a href="/uploads/2014/10/00000310.jpg"><img src="/uploads/2014/10/00000310.jpg" alt="00000310" width="1137" height="640" class="alignnone size-full wp-image-1142" /></a><br />
与持子道别，真的非常触动</p>
<p><a href="/uploads/2014/10/00000317.jpg"><img src="/uploads/2014/10/00000317.jpg" alt="00000317" width="1137" height="640" class="alignnone size-full wp-image-1143" /></a><br />
最后ゆうか醒过来，感人的再相遇。</p>
<p><strong>其他</strong><br />
<a href="/uploads/2014/10/00000020.jpg"><img src="/uploads/2014/10/00000020.jpg" alt="00000020" width="1137" height="640" class="alignnone size-full wp-image-1133" /></a><br />
莉央，经常和男主一起玩游戏，一开始还以为能攻略，但其实就是个路人，不过后来也给了男主很大的帮助。</p>
<p><a href="/uploads/2014/10/00000254.jpg"><img src="/uploads/2014/10/00000254.jpg" alt="00000254" width="1137" height="640" class="alignnone size-full wp-image-1132" /></a><br />
<a href="/uploads/2014/10/00000296.jpg"><img src="/uploads/2014/10/00000296.jpg" alt="00000296" width="1137" height="640" class="alignnone size-full wp-image-1137" /></a><br />
まぁアワシマ、腐れ人魚 作为一个AI，游戏引导人来说，也是相当搞怪的一个角色，从一开始的不正经，到最后ゆうか线Last Quest的时候真的被感动了。</p>
<p><a href="/uploads/2014/10/00000077.jpg"><img src="/uploads/2014/10/00000077.jpg" alt="00000077" width="1137" height="640" class="alignnone size-full wp-image-1134" /></a><br />
京月持子，命运也是凄惨，结有作为生体电脑的研究人员在最后的意识转移的时候生体电脑被调包，差点就回不来了。</p>
<p><a href="/uploads/2014/10/00000318.jpg"><img src="/uploads/2014/10/00000318.jpg" alt="00000318" width="1137" height="640" class="alignnone size-full wp-image-1144" /></a><br />
以及通关后的标题页面。</p>
<p>哈，怎么说呢，游戏初期缺乏一些紧张感，直到2nd OP故事迎来高潮，各种黑幕被揭开的感觉也是很刺激，有机会还想试试GIGA今年9月份出的新作。<br />
总体来说，近未来的设定给了点新鲜感，不过除了ゆうか线之外都比较普通，大家有时间有兴趣可以玩玩~</p>
]]></content>
    <summary type="html"><![CDATA[<p>「ハーヴェストオーバーレイ」GIGA在2014年6月的新作<br></br>
官网 <a href="http://products.web-giga.com/harvest/" target="_blank">http://products.web-giga.com/harvest/</a></p>
<p><a href="/uploads/2014/10/bg01.jpg"><img src="/uploads/2014/10/bg01.jpg" alt="bg01" width="1600" height="1200" class="alignnone size-full wp-image-1107" /></a></p>]]></summary>

    <category term="galgame" scheme="http://blog.tengattack.com/tags/galgame/" />
  </entry>
  <entry>
    <title>一个脑洞微博机器人</title>
    <link href="http://blog.tengattack.com/2014/09/28/a-brain-hole-bot-for-weibo/" />
    <id>http://blog.tengattack.com/2014/09/28/a-brain-hole-bot-for-weibo/</id>
    <published>2014-09-28T05:24:00Z</published>
    <updated>2014-09-28T05:25:05Z</updated>

    <content type="html"><![CDATA[<p>大致流程图:<br />
<a href="/uploads/2014/09/weibo_fans.png"><img src="/uploads/2014/09/weibo_fans.png" alt="weibo_fans" width="810" height="584" class="alignnone size-full wp-image-1096" /></a></p>
<p><span id="more-1095"></span><br />
这真是个脑洞，<strong>简单来说就是我fo你，你不回fo我就unfo你。</strong><br />
<del datetime="2014-09-28T13:20:30+00:00">如果你是被我这样fo的请原谅我。</del><br />
不知说啥，暑假快结束的时候弄的，今天才有空整理一下发上来。<br />
也没啥技术含量，就是脑洞……</p>
<p>挂了1小时的效果图:<br />
<a href="/uploads/2014/09/test1.png"><img src="/uploads/2014/09/test1.png" alt="test1" width="282" height="100" class="alignnone size-large wp-image-1097" /></a><br />
速度不是很快，有意为之，一天大概能涨100粉吧，挂了几天就没继续玩了。</p>
<p>源码:<br />
<a href="https://github.com/tengattack/weibo-autofollow-bot" target="_blank">https://github.com/tengattack/weibo-autofollow-bot</a></p>
]]></content>
    <summary type="html"><![CDATA[<p>大致流程图:<br></br>
<a href="/uploads/2014/09/weibo_fans.png"><img src="/uploads/2014/09/weibo_fans.png" alt="weibo_fans" width="810" height="584" class="alignnone size-full wp-image-1096" /></a></p>]]></summary>

    <category term="nodejs" scheme="http://blog.tengattack.com/tags/nodejs/" />
    <category term="develop" scheme="http://blog.tengattack.com/tags/develop/" />
  </entry>
  <entry>
    <title>修改Windows下dnsapi.dll强制使用TCP进行DNS查询</title>
    <link href="http://blog.tengattack.com/2014/09/03/modify-dnsapi.dll-to-enforce-tcp-dns/" />
    <id>http://blog.tengattack.com/2014/09/03/modify-dnsapi.dll-to-enforce-tcp-dns/</id>
    <published>2014-09-03T11:31:17Z</published>
    <updated>2014-09-03T18:22:19Z</updated>

    <content type="html"><![CDATA[<p>首先我承认，我一时脑洞，好好的一个人，浪费几小时去折腾这破玩意。</p>
<p>先看看效果：<br />
<a href="/uploads/2014/09/tcp-dns.png"><img src="/uploads/2014/09/tcp-dns.png" alt="tcp dns" width="692" height="79" class="alignnone size-full wp-image-1068" /></a><br />
<span id="more-1067"></span><br />
由于之前在路由上设置了内网的TCP转发，可惜DNS查询在Windows下默认使用的是UDP方式，而且居然没有修改的方式！<br />
在网上搜索之后，发现可以通过修改 dnsapi.dll 的方式来实现强制使用TCP进行DNS查询，但是很可惜的是作者没说具体的方法。<del datetime="2014-09-03T19:49:53+00:00">妈蛋我一下子就兴奋了，这是赤裸裸地挑衅啊！</del></p>
<p>知道该怎么做之后就是开工了，先去MSDN上看看关于 dnsapi.dll 的手册，找到下面2条：<br />
<a href="http://msdn.microsoft.com/en-us/library/windows/desktop/ms682016(v=vs.85).aspx" target="_blank">http://msdn.microsoft.com/en-us/library/windows/desktop/ms682016(v=vs.85).aspx</a><br />
<a href="http://msdn.microsoft.com/en-us/library/windows/desktop/cc982162(v=vs.85).aspx" target="_blank">http://msdn.microsoft.com/en-us/library/windows/desktop/cc982162(v=vs.85).aspx</a><br />
<strong>DnsQuery是系统查询DNS时调用的函数，DNS Constants是一些常量，对我们接下来修改dll会很有帮助。</strong></p>
<p>由于是Windows 8.1系统，有32位和64位的dll，我们要分析修改2次。<br />
首先是32位的dll，这个在 C:\Windows\SysWOW64\dnsapi.dll 。<br />
Windows下自然是用Visual Studio调试，随便写个程序来调用dnsapi：</p>
<pre class="brush: cpp; title: ; notranslate">
#include &lt;Windows.h&gt;
#include &lt;WinDNS.h&gt;

#pragma comment(lib, &quot;Dnsapi.lib&quot;)

int main()
{
  DnsQuery(L&quot;www.google.com&quot;, DNS_TYPE_A, DNS_QUERY_USE_TCP_ONLY | DNS_QUERY_BYPASS_CACHE, NULL, NULL, NULL);
  return 0;
}
</pre>
<p>然后就是调试，跟踪，可惜我没有去下载Windows的调试符号文件(pdb)，不然可能会更轻松点。<br />
跟到这个：<br />
<a href="/uploads/2014/09/dnsapi-x86.png"><img src="/uploads/2014/09/dnsapi-x86.png" alt="dnsapi-x86" width="383" height="529" class="alignnone size-full wp-image-1069" /></a><br />
很好，在前几行断点处可以看出 [ebx] 是我们传入的Options，这里我们可以看出他在和一些常量做比较，这个 4000000h 由于在常量表(DNS Query Options)找不到值为 0x04000000 的定义，我觉得可能这个值就是保留定义的，也不大可能用上，于是决定放弃这个数值，来加上 DNS_QUERY_USE_TCP_ONLY 标志。（主要是没有调试文件搞得调了半天，也没找到其他更好的修改方式了，如果有人知道，请务必告知！）<br />
于是，就在图中 71B34795 改成：</p>
<pre class="brush: cpp; title: ; notranslate">
__asm {
  or ecx, 2
  mov [ebx], ecx
  xor eax, eax
  nop
  nop
  nop
}
</pre>
<p>这样，对于Windows 8.1的32位的 dnsapi.dll (6.3.9600.17039) 做出的修改就是：</p>
<pre class="brush: plain; title: ; notranslate">
00003B95: 8B -&gt; 83
00003B96: C1 -&gt; C9
00003B97: 8B -&gt; 02
00003B98: 53 -&gt; 89
00003B99: 04 -&gt; 0B
00003B9A: 25 -&gt; 33
00003B9B: 00 -&gt; C0
00003B9C: 00 -&gt; 90
00003B9D: 00 -&gt; 90
00003B9E: 04 -&gt; 90
</pre>
<p>下面就是64位的dll，这个在 C:\Windows\System32\dnsapi.dll 。<br />
调试的方法和32位的相同，记得要更换编译方式，然后开始调试反汇编代码。<br />
<a href="/uploads/2014/09/dnsapi-x64.png"><img src="/uploads/2014/09/dnsapi-x64.png" alt="dnsapi-x64" width="560" height="341" class="alignnone size-full wp-image-1070" /></a><br />
这里找到的代码和32位的大致相同。接下来打开IDA找到这个代码的位置。<br />
<a href="/uploads/2014/09/dnsapi-x64-3.png"><img src="/uploads/2014/09/dnsapi-x64-3.png" alt="dnsapi-x64-3" width="320" height="405" class="alignnone size-large wp-image-1072" /></a><br />
将其改成这个样子：<br />
<a href="/uploads/2014/09/dnsapi-x64-4.png"><img src="/uploads/2014/09/dnsapi-x64-4.png" alt="dnsapi-x64-4" width="259" height="196" class="alignnone size-large wp-image-1073" /></a></p>
<p>这样，对于Windows 8.1的64位的 dnsapi.dll (6.3.9600.17039) 做出的修改就是：</p>
<pre class="brush: plain; title: ; notranslate">
00002C07: 0F -&gt; 83
00002C08: BA -&gt; C8
00002C09: E0 -&gt; 02
00002C0A: 1A -&gt; 90
00002C0B: 0F -&gt; 49
00002C0C: 82 -&gt; 89
00002C0D: 3E -&gt; 45
00002C0E: 78 -&gt; 00
00002C0F: 04 -&gt; 90
00002C10: 00 -&gt; 90
</pre>
<p>这样就算搞定了，强制设置上 DNS_QUERY_USE_TCP_ONLY 这个标志，也就是强制走TCP。</p>
<p>然后我们需要把文件拷回去，记得先要修改对应目录下的文件的安全性，然后改名成 dnsapi.dll.bak 做个备份，最后把我们的修改后的文件拷贝进去就好了。<br />
<a href="/uploads/2014/09/fix-files.png"><img src="/uploads/2014/09/fix-files.png" alt="fix files" width="780" height="605" class="alignnone size-full wp-image-1074" /></a></p>
<p>最好重启一下，然后就可以在Wireshark中看到效果啦~<br />
<a href="/uploads/2014/09/tcp-dns.png"><img src="/uploads/2014/09/tcp-dns.png" alt="tcp dns" width="692" height="79" class="alignnone size-full wp-image-1068" /></a></p>
<p>最后附上我修改好32位和64位的 dnsapi.dll (6.3.9600.17039) 文件：<br />
<a href="https://bless.moe/io/win/mod/dnsapi/" target="_blank">https://bless.moe/io/win/mod/dnsapi/</a></p>
<p>另外，我们需要注意一点，像<strong>在 chrome://flags/ 开启了实验性异步 DNS 客户端的 Chrome</strong> 等软件会使用自带的DNS客户端，不走系统的DNS解析，所以可能还是UDP方式查询DNS。<br />
-<del datetime="2014-09-03T19:33:24+00:00">我费了这么大力气，就为了写篇文章都不行嘛，其实我觉得拿这玩意去投稿的话也能赚点稿费就是了</del>-</p>
]]></content>
    <summary type="html"><![CDATA[<p>首先我承认，我一时脑洞，好好的一个人，浪费几小时去折腾这破玩意。</p>
<p>先看看效果：<br></br>
<a href="/uploads/2014/09/tcp-dns.png"><img src="/uploads/2014/09/tcp-dns.png" alt="tcp dns" width="692" height="79" class="alignnone size-full wp-image-1068" /></a><br></br>
<span id="more-1067"></span><br></br>
由于之前在路由上设置了内网的TCP转发，可惜DNS查询在Windows下默认使用的是UDP方式，而且居然没有修改的方式！<br></br>
在网上搜索之后，发现可以通过修改 dnsapi.dll 的方式来实现强制使用TCP进行DNS查询，但是很可惜的是作者没说具体的方法。<del datetime="2014-09-03T19:49:53+00:00">妈蛋我一下子就兴奋了，这是赤裸裸地挑衅啊！</del></p>]]></summary>

    <category term="c++" scheme="http://blog.tengattack.com/tags/c/" />
    <category term="develop" scheme="http://blog.tengattack.com/tags/develop/" />
  </entry>
  <entry>
    <title>博客迁移到 bless.moe</title>
    <link href="http://blog.tengattack.com/2014/08/30/blog-migrated-to-bless.moe/" />
    <id>http://blog.tengattack.com/2014/08/30/blog-migrated-to-bless.moe/</id>
    <published>2014-08-30T12:17:20Z</published>
    <updated>2014-08-31T03:36:54Z</updated>

    <content type="html"><![CDATA[<p>也赶着潮流注册了个萌域名，看起来感觉不错。<br />
博客也顺便移到新域名下了，一切都这么好玩~</p>
<p><a href="https://bless.moe/blog/">https://bless.moe/blog/</a></p>
]]></content>
    <summary type="html"><![CDATA[<p>也赶着潮流注册了个萌域名，看起来感觉不错。<br></br>
博客也顺便移到新域名下了，一切都这么好玩~</p>
<p><a href="https://bless.moe/blog/">https://bless.moe/blog/</a></p>
]]></summary>

    <category term="web" scheme="http://blog.tengattack.com/tags/web/" />
    <category term="blog" scheme="http://blog.tengattack.com/tags/blog/" />
  </entry>
  <entry>
    <title>为R6300v2新固件交叉编译shadowsocks-libev</title>
    <link href="http://blog.tengattack.com/2014/08/30/cross-compile-shadowsocks-libev-for-r6300v2/" />
    <id>http://blog.tengattack.com/2014/08/30/cross-compile-shadowsocks-libev-for-r6300v2/</id>
    <published>2014-08-30T08:33:21Z</published>
    <updated>2015-09-28T06:33:35Z</updated>

    <content type="html"><![CDATA[<p>还记得很久之前阿三的一个被嘲讽为bad hack的R6300v2的dd-wrt固件刚出的时候，本人曾经还为其交叉编译了python：<br />
<a href="http://tengattack.com/archive/755" target="_blank">http://tengattack.com/archive/755</a></p>
<p>当时用的工具链还是hndtools-arm-linux-2.6.36-uclibc-4.5.3，uclibc果然在这类嵌入式设备中用的很多啊。<br />
不过自从Kong Mod的R6300v2的dd-wrt固件在 r24500 (Build 24500) 之后，他把uClibc更换为musl，让很多以前交叉编译出来的东西都用不了。<br />
（可以参考 <a href="http://www.desipro.de/ddwrt/K3-AC-Arm/Changelog" target="_blank">http://www.desipro.de/ddwrt/K3-AC-Arm/Changelog</a> Build 24500 ）</p>
<p>不过本人今天难得有点时间，正好折腾完了服务器上的kvm虚拟化了一台Archlinux当Web Server，和一台Windows Server来跑点其他的小玩意，也是之前那篇博文有人问到了，就来折腾一下新固件的交叉编译吧。<br />
<span id="more-1027"></span><br />
首先，我们肯定要知道他用的工具链是啥，他在他的博客和固件发布页没写任何信息，只是知道换成了musl，如果是自己搭的工具链那就无解了，不过我相信没人这么蛋疼。<br />
最后我搜了半天，终于找到了，是<strong>crossx86-arm-linux-musleabi-1.1.2</strong>，虽然不能确认就是这个，但是至少用这个编译出来的可以正常运行，我们也就用这个工具链吧。<br />
<strong>（可以在我这里找到：<a href="https://bless.moe/io/linux/toolchains/" title="toolchains" target="_blank">https://bless.moe/io/linux/toolchains/</a>）</strong></p>
<p>为了编译shadowsocks-libev，我们在他的<a href="https://github.com/madeye/shadowsocks-libev" target="_blank">GitHub页</a>可以看到一些说明，得知我们需要首先编译OpenSSL或PolarSSL。<br />
由于在一开始提到的<a href="http://tengattack.com/archive/755" target="_blank">文章</a>中也编译过OpenSSL，所以这里打算直接用。<br />
不过在更换为musl的C Library之后编译会遇到一些问题，我们可以来看看。</p>
<p>这里我使用的openssl版本是 <strong>openssl-1.0.1i</strong> 。</p>
<p>在设定好交叉编译的环境后，进入openssl的源码目录，我们编译时会提示缺少 termio.h 文件，这个头文件是uClibc才有的，而我们现在是musl。<br />
所以我们需要做一些修改，首先把Configure配置文件中的 <strong>-DTERMIO</strong> 改为 <strong>-DTERMIOS</strong> ：</p>
<pre class="brush: bash; title: ; notranslate">
sed -i 's/-DTERMIO/-DTERMIOS/g' Configure
</pre>
<p>然后就是配置和编译，prefix可根据自己的需求修改：</p>
<pre class="brush: bash; title: ; notranslate">
CC=arm-linux-gcc CXX=arm-linux-g++ AR=arm-linux-ar RANLIB=arm-linux-ranlib ./Configure no-asm shared --prefix=/usr/local/arm/ssl linux-armv4
make &amp;&amp; make install
</pre>
<p>改完后编译还是有点问题，他还是会提示缺少 termio.h 文件，这时我们得修改 ./crypto/ui/ui_openssl.c 文件来强制更换定义。<br />
大概在222行处，在
<pre class="brush: cpp; title: ; notranslate">#ifdef TERMIOS</pre>
<p> 这行代码前面，来强制更换定义：</p>
<pre class="brush: cpp; title: ; notranslate">
#define TERMIOS
#undef  TERMIO
#undef  SGTTY
</pre>
<p>不知有没有更好的方法，希望能告知，万分感谢！</p>
<p>然后继续编译，搞定！别忘记 <bash>make install</bash> 。</p>
<p>接着就是 shadowsocks-libev 了，这里本人使用的版本是 1.4.6 。<br />
从git上拖下代码，进入源码目录，配置和编译（参数需根据自己的环境修改）：</p>
<pre class="brush: bash; title: ; notranslate">
CC=arm-linux-musleabi-gcc CXX=arm-linux-musleabi-g++ AR=arm-linux-musleabi-ar RANLIB=arm-linux-musleabi-ranlib ./configure --prefix=/usr/local/arm/shadowsocks-libev --with-openssl=/usr/local/arm/ssl --host=arm-linux
make &amp;&amp; make install
</pre>
<p>如果需要编译 ss-redir 我们需要用到linux内核的头文件，在这个工具链中没有，由于之前下过dd-wrt官网的工具链：<br />
<a href="http://www.dd-wrt.com/site/support/other-downloads?path=others/sourcecode/toolchains/" target="_blank">http://www.dd-wrt.com/site/support/other-downloads?path=others/sourcecode/toolchains/</a></p>
<p>找了个相近的工具链（toolchain-arm_cortex-a9_gcc-4.9-linaro_musl-1.1.2_eabi），直接把需要用到的文件链接了过来：<br />
（这里的路径需要根据自己的环境进行修改，我这里的工具链都放在 /media/s/ 下了）</p>
<pre class="brush: bash; title: ; notranslate">
ln -s /media/s/dd-wrt/toolchain-arm_cortex-a9_gcc-4.9-linaro_musl-1.1.2_eabi/include/linux /media/s/dd-wrt/arm-linux-musleabi/arm-linux-musleabi/include/
ln -s /media/s/dd-wrt/toolchain-arm_cortex-a9_gcc-4.9-linaro_musl-1.1.2_eabi/include/asm /media/s/dd-wrt/arm-linux-musleabi/arm-linux-musleabi/include/
ln -s /media/s/dd-wrt/toolchain-arm_cortex-a9_gcc-4.9-linaro_musl-1.1.2_eabi/include/asm-generic /media/s/dd-wrt/arm-linux-musleabi/arm-linux-musleabi/include/
</pre>
<p><strong>接着继续编译</strong>，搞定收工~</p>
<p>最后是使用体验，从uClibc到musl的固件，能感觉速度有明显的提升（应该不是我的错觉）。<br />
对shadowsocks-libev的感觉就是他大量的连接处理还是不行，我这里实际环境是内网到内网的代理，所以不存在丢包和网络不稳定的一些情况。<br />
在这种条件下，如果连接一多就明显发现网页打开的速度变慢，如果能尽快加上python版的worker的特性应该会有所改善吧。<br />
另外如果在高并发条件下有提示 ERROR: No file descriptors available 这样的错误的话，可以尝试用下面的命令来提高并发，一般默认是1024。</p>
<pre class="brush: bash; title: ; notranslate">
ulimit -n 51200
</pre>
<p><strong>下面附上我编译好的shadowsocks的二进制文件：<br />
<a href="https://bless.moe/io/linux/R6300v2/shadowsocks-libev/" title="shadowsocks-libev for R6300v2" target="_blank">https://bless.moe/io/linux/R6300v2/shadowsocks-libev/</a></strong></p>
<p>另外，还要感谢一下马尾菊苣，给我了很多指点，中间做了不少蠢事，真是给他添麻烦了。</p>
]]></content>
    <summary type="html"><![CDATA[<p>还记得很久之前阿三的一个被嘲讽为bad hack的R6300v2的dd-wrt固件刚出的时候，本人曾经还为其交叉编译了python：<br></br>
<a href="http://tengattack.com/archive/755" target="_blank">http://tengattack.com/archive/755</a></p>]]></summary>

    <category term="c++" scheme="http://blog.tengattack.com/tags/c/" />
    <category term="develop" scheme="http://blog.tengattack.com/tags/develop/" />
  </entry>
  <entry>
    <title>『银之十字架与吸血姬』有感</title>
    <link href="http://blog.tengattack.com/2014/08/19/gin-no-juujika-to-draculea/" />
    <id>http://blog.tengattack.com/2014/08/19/gin-no-juujika-to-draculea/</id>
    <published>2014-08-19T02:53:41Z</published>
    <updated>2014-08-19T02:59:19Z</updated>

    <content type="html"><![CDATA[<p><a href="/uploads/2014/08/2012092408271235.jpg"><img src="/uploads/2014/08/2012092408271235-1024x810.jpg" alt="插画" width="1024" height="810" class="alignnone size-large wp-image-1018" /></a></p>
<p>这几天挺不走运的，遇到了很多倒霉的事，总之就是很无聊，然后很巧合的情况下发现了这本之前因为看到了上面的这个一直想看却忘记了的小说。</p>
<p><strong>（剧透规避）</strong><br />
<span id="more-1017"></span><br />
这部小说一共5卷，不知是不是作者的风格还是被腰斩了，总之比现在一些动不动十来卷还没完结的小说要少很多，作者十月老师写的剧情比较紧凑，用5卷的剧情给我们讲述了一个由吸血鬼养大的孩子在抚养他的吸血鬼离开他最后又回来到再次离开他这段时间发生的他与吸血鬼、半吸血鬼、魔女、半狼人和人类之间的邂逅。</p>
<p>其实我蛮喜欢这类吸血鬼的故事的，一般这类故事往往有人类如何与吸血鬼和平共处这样的剧情，这系列小说虽然也有，但只是稍微提到了，而男主一开始就能和吸血鬼很好地相处，也没有太多人类和吸血鬼之间的矛盾的描述，因为知道的人也不多。嘛，也是为了迎合现代轻小说的套路，主要是后宫学园喜剧。</p>
<p>一开始扑朔迷离的男主的抚养人米拉露卡到最后的第5卷也完全收线，虽然最后不是大团圆happy end（米拉露卡离开），但是这也未尝不是个好结局，知道真相的男主也知道米拉露卡是真正永远的活在了他的心中，也是代表与过去的告别，就算悲伤但是不能停下脚步这样的感觉。</p>
<p>小说的最后说明真相时巧妙地用男主的特殊体质和女主吸血鬼露修拉不是真正的吸血鬼的事回避了吸血鬼和人类之间永恒与有限的巨大差异，这也是皆大欢喜的事。可惜这永恒与有限的矛盾感觉没有很好地被突出，总感觉差了点什么，也许是篇幅有限吧，感觉5卷确实太少了点，虽然世界观铺开了，不过却草草收场，有种羽翼未丰满就被折断的感觉，总有点遗憾。</p>
<p>个人觉得这类吸血鬼题材的小说需要一些剧烈的矛盾和冲突，才能将这样的故事发挥到极致，不管最后的结局如何，感觉缺乏大矛盾是这部小说的一个遗憾，不过嘛，能看得愉快就好了。</p>
<p>最后，感谢十月老师的这部『银之十字架与吸血姬』作品。</p>
]]></content>
    <summary type="html"><![CDATA[<p><a href="/uploads/2014/08/2012092408271235.jpg"><img src="/uploads/2014/08/2012092408271235-1024x810.jpg" alt="插画" width="1024" height="810" class="alignnone size-large wp-image-1018" /></a></p>]]></summary>

  </entry>
  <entry>
    <title>西冲之旅</title>
    <link href="http://blog.tengattack.com/2014/08/09/travel-to-xichong/" />
    <id>http://blog.tengattack.com/2014/08/09/travel-to-xichong/</id>
    <published>2014-08-08T21:40:30Z</published>
    <updated>2014-08-08T21:45:57Z</updated>

    <content type="html"><![CDATA[<p>前几天去西冲玩玩了两天，感觉不错。<br />
<span id="more-1008"></span></p>
<p>西冲的沙滩上风景不错，后面还踩着双人单车（想象月刊少女那种）去杨梅坑玩，那里山道上看下面的海感觉诗意满满。<br />
最令人不爽的那些一男一女的踩的双人单车，一个个和<strong>永动机</strong>一样，全力踩都追不上，被反超，真的是所谓的男女搭配干活不累？</p>
<p>不过到处是垃圾这一点还是一样……看着有点捉急……</p>
<p><a href="/uploads/2014/08/DSC_3803.jpg"><img src="/uploads/2014/08/DSC_3803-1024x682.jpg" alt="DSC_3803" width="1024" height="682" class="alignnone size-large wp-image-1010" /></a></p>
<p><a href="/uploads/2014/08/DSC_3775.jpg"><img src="/uploads/2014/08/DSC_3775-1024x682.jpg" alt="DSC_3775" width="1024" height="682" class="alignnone size-large wp-image-1009" /></a></p>
]]></content>
    <summary type="html"><![CDATA[<p>前几天去西冲玩玩了两天，感觉不错。<br></br>
<span id="more-1008"></span></p>
<p>西冲的沙滩上风景不错，后面还踩着双人单车（想象月刊少女那种）去杨梅坑玩，那里山道上看下面的海感觉诗意满满。<br></br>
最令人不爽的那些一男一女的踩的双人单车，一个个和<strong>永动机</strong>一样，全力踩都追不上，被反超，真的是所谓的男女搭配干活不累？</p>]]></summary>

    <category term="生活" scheme="http://blog.tengattack.com/tags/life/" />
    <category term="生活" scheme="http://blog.tengattack.com/tags/生活/" />
  </entry>
  <entry>
    <title>DIY 胆机耳放解码器</title>
    <link href="http://blog.tengattack.com/2014/07/15/diy-tube-amp-decoder/" />
    <id>http://blog.tengattack.com/2014/07/15/diy-tube-amp-decoder/</id>
    <published>2014-07-15T15:46:45Z</published>
    <updated>2014-07-15T15:46:45Z</updated>

    <content type="html"><![CDATA[<p>这学期又折腾了一个小玩意——胆机耳放解码器。</p>
<p>声音还不错，就是外观有点小挫……</p>
<p><a href="/uploads/2014/07/DSC_02931-s.png"><img src="/uploads/2014/07/DSC_02931-s-1024x682.png" alt="DSC_0293[1]-s" width="1024" height="682" class="alignnone size-large wp-image-1002" /></a><br />
<span id="more-1001"></span></p>
<p>主要解码芯片用了TE7022和PCM1794，音频信号部分除了使用了个E88CC的管子做为缓冲之外，IV转换是OPA4134，差分是TPA6120A2，最后放大用得是OPA2604。<br />
不过现在感觉最后用的芯片功率稍有不足，推不动高阻，不过用来推我这K701还是足够了。</p>
<p>AD画的电路板：<br />
<a href="/uploads/2014/07/pcbpreview.png"><img src="/uploads/2014/07/pcbpreview-1024x680.png" alt="pcbpreview" width="1024" height="680" class="alignnone size-large wp-image-1003" /></a></p>
<p>一开始做测试的时候电阻用5%的都能带来信号的直流偏移，还是堆料大法好，全部上相对较好的原件的话，就没法把责任推到原件身上了。</p>
<p>最后用起来的感觉不错，动态高，不过有个小问题，由于用的是现成的TE7022模块，妈蛋，这玩意用起来还有技术封锁，因为TE7022要给芯片写程序，自己还不好弄，回头有机会把芯片里的数据dump出来，好造福世人。那个台湾公司的datasheet写的一点都不详细，据说只有合作商才能拿到完整的datasheet，真心坑。</p>
<p>不过还是挺满意这小玩意的。</p>
]]></content>
    <summary type="html"><![CDATA[<p>这学期又折腾了一个小玩意——胆机耳放解码器。</p>
<p>声音还不错，就是外观有点小挫……</p>
<p><a href="/uploads/2014/07/DSC_02931-s.png"><img src="/uploads/2014/07/DSC_02931-s-1024x682.png" alt="DSC_0293[1]-s" width="1024" height="682" class="alignnone size-large wp-image-1002" /></a><br></br>
<span id="more-1001"></span></p>]]></summary>

    <category term="device" scheme="http://blog.tengattack.com/tags/device/" />
    <category term="学校" scheme="http://blog.tengattack.com/tags/学校/" />
    <category term="PCB" scheme="http://blog.tengattack.com/tags/pcb/" />
  </entry>
  <entry>
    <title>动画般的代码显示效果</title>
    <link href="http://blog.tengattack.com/2014/07/02/programming-display-effect-like-animation/" />
    <id>http://blog.tengattack.com/2014/07/02/programming-display-effect-like-animation/</id>
    <published>2014-07-02T05:28:26Z</published>
    <updated>2014-07-02T05:30:56Z</updated>

    <content type="html"><![CDATA[<p><a href="/uploads/2014/07/DSC_0264-s.png"><img src="/uploads/2014/07/DSC_0264-s-1024x682.png" alt="DSC_0264-s" width="1024" height="682" class="alignnone size-large wp-image-983" /></a><br />
<span id="more-982"></span><br />
从微博上看到一朋友 <a href="http://weibo.com/uncookie" title="@理子饼干" target="_blank">@理子饼干</a> 的图有感，自己也尝试了一下。<br />
这种效果直接用相机估计得加层滤镜才能拍出来，<strong>不过没关系，我们有强大的后期软件</strong>。<br />
<del datetime="2014-07-02T05:19:15+00:00">另外，Dell的边缘漏光在这里也起了点渲染的作用，难得有一次觉得漏光好。</del></p>
<p><a href="http://weibo.com/uncookie" title="@理子饼干" target="_blank">@理子饼干</a> 是使用的<strong>iPhoto滤镜</strong><br />
我这里是用 <strong>高斯模糊 + 曲线 + 叠加</strong> 实现的<br />
还有人提到了可以用<strong>缩放模糊(Zoom blur)</strong></p>
<p>看起来就像是某些动画里显示器显示的代码一样带感。<br />
<strong>这么棒的效果，少年，不来一发吗？</strong></p>
]]></content>
    <summary type="html"><![CDATA[<p><a href="/uploads/2014/07/DSC_0264-s.png"><img src="/uploads/2014/07/DSC_0264-s-1024x682.png" alt="DSC_0264-s" width="1024" height="682" class="alignnone size-large wp-image-983" /></a><br></br>
<span id="more-982"></span><br></br>
从微博上看到一朋友 <a href="http://weibo.com/uncookie" title="@理子饼干" target="_blank">@理子饼干</a> 的图有感，自己也尝试了一下。<br></br>
这种效果直接用相机估计得加层滤镜才能拍出来，<strong>不过没关系，我们有强大的后期软件</strong>。<br></br>
<del datetime="2014-07-02T05:19:15+00:00">另外，Dell的边缘漏光在这里也起了点渲染的作用，难得有一次觉得漏光好。</del></p>]]></summary>

    <category term="生活" scheme="http://blog.tengattack.com/tags/life/" />
    <category term="生活" scheme="http://blog.tengattack.com/tags/生活/" />
  </entry>
  <entry>
    <title>挂了2张挂画，瞬间感觉自己更像个死宅了……</title>
    <link href="http://blog.tengattack.com/2014/05/28/hang-two-paintings/" />
    <id>http://blog.tengattack.com/2014/05/28/hang-two-paintings/</id>
    <published>2014-05-28T11:36:45Z</published>
    <updated>2014-05-28T11:38:55Z</updated>

    <content type="html"><![CDATA[<p><a href="/uploads/2014/05/IMG_4417-small.jpg"><img src="/uploads/2014/05/IMG_4417-small-1024x768.jpg" alt="IMG_4417-small" width="1024" height="768" class="alignnone size-large wp-image-977" /></a></p>
<p>左边那幅是寻找失去的未来，这里有我的通关感想：<a href="http://tengattack.com/archive/876">http://tengattack.com/archive/876</a></p>
<p><del datetime="2014-05-28T11:34:00+00:00">我要对原作者表示深刻的歉意，因为这是盗图，但是实在是太喜欢了，受不了啊，请原谅我！</del></p>
]]></content>
    <summary type="html"><![CDATA[<p><a href="/uploads/2014/05/IMG_4417-small.jpg"><img src="/uploads/2014/05/IMG_4417-small-1024x768.jpg" alt="IMG_4417-small" width="1024" height="768" class="alignnone size-large wp-image-977" /></a></p>]]></summary>

    <category term="生活" scheme="http://blog.tengattack.com/tags/life/" />
    <category term="生活" scheme="http://blog.tengattack.com/tags/生活/" />
  </entry>
  <entry>
    <title>机箱水冷折腾记</title>
    <link href="http://blog.tengattack.com/2014/04/07/water-cooled-chassis/" />
    <id>http://blog.tengattack.com/2014/04/07/water-cooled-chassis/</id>
    <published>2014-04-07T08:00:00Z</published>
    <updated>2014-04-07T08:00:00Z</updated>

    <content type="html"><![CDATA[<p>炎热的夏季即将到来什么的都是场面话，为了解决带来高温度的显卡同时产生的巨大的噪音，于是便考虑上水冷。</p>
<p>既然要上水冷自然是CPU、GPU一起来。</p>
<p><del datetime="2014-05-28T11:34:00+00:00">我要对原作者表示深刻的歉意，因为这是盗图，但是实在是太喜欢了，受不了啊，请原谅我！</del></p>
]]></content>
    <summary type="html"><![CDATA[<p>炎热的夏季即将到来什么的都是场面话，为了解决带来高温度的显卡同时产生的巨大的噪音，于是便考虑上水冷。</p>
<p>既然要上水冷自然是CPU、GPU一起来。</p>
<p><del datetime="2014-05-28T11:34:00+00:00">我要对原作者表示深刻的歉意，因为这是盗图，但是实在是太喜欢了，受不了啊，请原谅我！</del></p>]]></summary>

    <category term="生活" scheme="http://blog.tengattack.com/tags/life/" />
    <category term="生活" scheme="http://blog.tengattack.com/tags/生活/" />
  </entry>
  <entry>
    <title>世界线变动率探测仪 2nd edition</title>
    <link href="http://blog.tengattack.com/2014/03/05/divergence-meter-2nd-edition/" />
    <id>http://blog.tengattack.com/2014/03/05/divergence-meter-2nd-edition/</id>
    <published>2014-03-05T12:53:53.000Z</published>
    <updated>2014-03-05T12:56:25.000Z</updated>

    <content type="html"><![CDATA[<a href="/uploads/2014/03/DSC_6841.jpg"><img src="/uploads/2014/03/DSC_6841-1024x677.jpg" alt="DSC_6841" width="1024" height="677" class="alignnone size-large wp-image-936" /></a>
<!--more-->
<a href="/uploads/2014/03/DSC_6842.jpg"><img src="/uploads/2014/03/DSC_6842-1024x677.jpg" alt="DSC_6842" width="1024" height="677" class="alignnone size-large wp-image-937" /></a>

<a href="/uploads/2014/03/DSC_6843.jpg"><img src="/uploads/2014/03/DSC_6843-1024x677.jpg" alt="DSC_6843" width="1024" height="677" class="alignnone size-large wp-image-938" /></a>

<a href="/uploads/2014/03/DSC_6845.jpg"><img src="/uploads/2014/03/DSC_6845-1024x677.jpg" alt="DSC_6845" width="1024" height="677" class="alignnone size-large wp-image-939" /></a>

<a href="/uploads/2014/03/DSC_6846.jpg"><img src="/uploads/2014/03/DSC_6846-1024x677.jpg" alt="DSC_6846" width="1024" height="677" class="alignnone size-large wp-image-940" /></a>

<a href="/uploads/2014/03/DSC_6855.jpg"><img src="/uploads/2014/03/DSC_6855-1024x678.jpg" alt="DSC_6855" width="1024" height="678" class="alignnone size-large wp-image-935" /></a>

<a href="/uploads/2014/03/DSC_6856.jpg"><img src="/uploads/2014/03/DSC_6856-1024x677.jpg" alt="DSC_6856" width="1024" height="677" class="alignnone size-large wp-image-942" /></a>

<a href="/uploads/2014/03/DSC_6857.jpg"><img src="/uploads/2014/03/DSC_6857-1024x677.jpg" alt="DSC_6857" width="1024" height="677" class="alignnone size-large wp-image-943" /></a>

<a href="/uploads/2014/03/DSC_6859.jpg"><img src="/uploads/2014/03/DSC_6859-1024x677.jpg" alt="DSC_6859" width="1024" height="677" class="alignnone size-large wp-image-944" /></a>

<a href="/uploads/2014/03/DSC_6860.jpg"><img src="/uploads/2014/03/DSC_6860-1024x677.jpg" alt="DSC_6860" width="1024" height="677" class="alignnone size-large wp-image-945" /></a>

<a href="/uploads/2014/03/DSC_6862.jpg"><img src="/uploads/2014/03/DSC_6862-1024x677.jpg" alt="DSC_6862" width="1024" height="677" class="alignnone size-large wp-image-946" /></a>

<a href="/uploads/2014/03/DSC_6864.jpg"><img src="/uploads/2014/03/DSC_6864-1024x677.jpg" alt="DSC_6864" width="1024" height="677" class="alignnone size-large wp-image-947" /></a>
]]></content>
    <summary type="html"><![CDATA[<a href="/uploads/2014/03/DSC_6841.jpg"><img src="/uploads/2014/03/DSC_6841-1024x677.jpg" alt="DSC_6841" width="1024" height="677" class="alignnone size-large wp-image-936" /></a>]]></summary>

    <category term="device" scheme="http://blog.tengattack.com/tags/device/" />
    <category term="nixie" scheme="http://blog.tengattack.com/tags/nixie/" />
    <category term="PCB" scheme="http://blog.tengattack.com/tags/pcb/" />
  </entry>
  <entry>
    <title>失われた未来を求めて 通关感想</title>
    <link href="http://blog.tengattack.com/2014/03/05/À-la-recherche-du-temps-perdu/" />
    <id>http://blog.tengattack.com/2014/03/05/À-la-recherche-du-temps-perdu/</id>
    <published>2014-03-05T07:37:20.000Z</published>
    <updated>2014-03-05T09:12:12.000Z</updated>

    <content type="html"><![CDATA[首先说说感想，太赞！
另外听说要动画化了，超期待！！！

深琦暮人和黑谷忍人设，图片出处官网: <a href="http://ushinawareta-mirai.com/" title="失われた未来を求めて" target="_blank">http://ushinawareta-mirai.com/</a>
<a href="/uploads/2014/03/ushi-small.png"><img src="/uploads/2014/03/ushi-small.png" alt="ushi-small" width="800" height="535" class="alignnone size-full wp-image-877" /></a>

前段时间就推完了，可惜一直没啥时间记录一下，趁着这几天没啥课，记录留念一下，算是真正画上一个句号。

(剧透慎入)
<!--more-->
先说个题外话，不知为何在这种SF题材的作品中都喜欢出现齿轮图：
<a href="/uploads/2014/03/00000014.png"><img src="/uploads/2014/03/00000014-1024x575.png" alt="00000014" width="1024" height="575" class="alignnone size-large wp-image-880" /></a>
正好我身上也穿着一件带着齿轮的图，诶嘿~

下面开始是正文:

这部作品虽然是TRUMPLE的处女作，但是不管CG还是BGM以及演出都非常棒。
CG人设不用说，深琦暮人的大名，我最喜欢的画师之一。
BGM和演出都配合的十分到位，没有任何突兀的感觉，切实传达出作品中人物的感情，不想有些作品，BGM插入得非常突兀，突然场景就改变，哎哟，都反应不过来啊。
接下来就看看故事的内容吧！

<a href="/uploads/2014/03/00000003.png"><img src="/uploads/2014/03/00000003.png" alt="00000003" class="alignnone size-full wp-image-892" /></a>
首先是爱理登场，这样的性格也不错嘛

<a href="/uploads/2014/03/00000010-filter.png"><img src="/uploads/2014/03/00000010-filter.png" alt="00000010-filter" width="1289" height="725" class="alignnone size-full wp-image-927" /></a>
故事的引导人物结登场，一开始就是裸体登场，男主你为何能把持得住！
<del datetime="2014-03-05T08:51:39+00:00">请原谅我为这张图打码</del>

<a href="/uploads/2014/03/00000011.png"><img src="/uploads/2014/03/00000011.png" alt="00000011" width="1066" height="600" class="alignnone size-full wp-image-908" /></a>
要不是佳织上来我觉得男主必然把持不住

<a href="/uploads/2014/03/00000013.png"><img src="/uploads/2014/03/00000013.png" alt="00000013" width="1066" height="600" class="alignnone size-full wp-image-909" /></a>
第二天，结想要加入天文学会，也就是主角所在的社团，虽然叫天文学会，但实际上做的事情和天文学会完全没关系，就是个帮学生会干脏活累活，做一些学生会不方便直接出面的事情的社团

<a href="/uploads/2014/03/00000016.png"><img src="/uploads/2014/03/00000016.png" alt="00000016" width="1066" height="600" class="alignnone size-full wp-image-910" /></a>
一番波折之后结终于来到部室

<a href="/uploads/2014/03/00000021.png"><img src="/uploads/2014/03/00000021.png" alt="00000021" width="1066" height="600" class="alignnone size-full wp-image-911" /></a>
学姐毒舌好棒啊啊啊啊

<a href="/uploads/2014/03/00000029.png"><img src="/uploads/2014/03/00000029.png" alt="00000029" width="1066" height="600" class="alignnone size-full wp-image-912" /></a>
男主寄居在佳织家，日久生情，难免产生情愫

<a href="/uploads/2014/03/00000040.png"><img src="/uploads/2014/03/00000040.png" alt="00000040" width="1066" height="600" class="alignnone size-full wp-image-913" /></a>
一个人在天台的结，略带天然的性格也好棒！

<a href="/uploads/2014/03/00000058.png"><img src="/uploads/2014/03/00000058.png" alt="00000058" width="1066" height="600" class="alignnone size-full wp-image-914" /></a>
男主要去救被柔道部绑架了的佳织，因为男主和结之间的各种让佳织心生嫉妒之情，给柔道部抓住佳织单独一人的机会，不过也正因如此，男主和佳织才能更进一步，本来只是双方对对方有好感，但是一直跨不出这一步。

<a href="/uploads/2014/03/00000137.png"><img src="/uploads/2014/03/00000137.png" alt="00000137" width="1066" height="600" class="alignnone size-full wp-image-915" /></a>
大人版的爱理！

<a href="/uploads/2014/03/00000152.png"><img src="/uploads/2014/03/00000152.png" alt="00000152" class="alignnone size-full wp-image-884" /></a>
其实是从未来来的，来观测改变的事情，从学生时代就一直暗恋男主，但是……

<a href="/uploads/2014/03/00000162.png"><img src="/uploads/2014/03/00000162.png" alt="00000162" width="1066" height="600" class="alignnone size-full wp-image-916" /></a>
爱理线，坠入爱河的爱理完全没有了以前的强势，啊啊啊，好萌啊啊

<a href="/uploads/2014/03/00000195.png"><img src="/uploads/2014/03/00000195.png" alt="00000195" width="1066" height="600" class="alignnone size-full wp-image-917" /></a>

<a href="/uploads/2014/03/00000200.png"><img src="/uploads/2014/03/00000200.png" alt="00000200" width="1066" height="600" class="alignnone size-full wp-image-918" /></a>
学姐线！

<a href="/uploads/2014/03/00000219.png"><img src="/uploads/2014/03/00000219.png" alt="00000219" width="1066" height="600" class="alignnone size-full wp-image-919" /></a>
<del datetime="2014-03-05T08:56:54+00:00">烦恼的学姐由我来拯救！！</del>

<a href="/uploads/2014/03/00000234.png"><img src="/uploads/2014/03/00000234.png" alt="00000234" width="1066" height="600" class="alignnone size-full wp-image-920" /></a>

学姐线的NTR的感觉也很棒，虽然没有真的被NTR啦
<a href="/uploads/2014/03/00000328.png"><img src="/uploads/2014/03/00000328.png" alt="00000328" class="alignnone size-full wp-image-885" /></a>

<a href="/uploads/2014/03/00000330.png"><img src="/uploads/2014/03/00000330.png" alt="00000330" class="alignnone size-full wp-image-886" /></a>
我和你说，黑化的爱理，简直神作，完全没有想到过还有这样的结局，小震惊了一下

结所肩负的使命和背后的故事终于在故事中慢慢露出冰山一角
<a href="/uploads/2014/03/00000280.png"><img src="/uploads/2014/03/00000280.png" alt="00000280" width="1066" height="600" class="alignnone size-full wp-image-921" /></a>

最后的结线，故事的最高潮催泪部分，动画想必也是走结的True End吧
<a href="/uploads/2014/03/00000347.png"><img src="/uploads/2014/03/00000347.png" alt="00000347" class="alignnone size-full wp-image-887" /></a>

结一个人背负了太多太多，为了完成自己的使命不惜牺牲自己
特别值得提到的是，这里是结的视点，用了大量篇幅描述结内心的活动，那种明明最喜欢的人在眼前，但却因为没有其他“世界线”的记忆宛若他人一样的感觉，但又不能将真相透露的那种感觉，着实令人无奈
<a href="/uploads/2014/03/00000390.png"><img src="/uploads/2014/03/00000390.png" alt="00000390" class="alignnone size-full wp-image-888" /></a>

为了改变佳织被因果束缚的死亡命运，结选择了最正确但最糟糕的选择
<a href="/uploads/2014/03/00000391.png"><img src="/uploads/2014/03/00000391.png" alt="00000391" class="alignnone size-full wp-image-889" /></a>

<a href="/uploads/2014/03/00000420.png"><img src="/uploads/2014/03/00000420.png" alt="00000420" class="alignnone size-full wp-image-890" /></a>

<a href="/uploads/2014/03/00000427.png"><img src="/uploads/2014/03/00000427.png" alt="00000427" class="alignnone size-full wp-image-891" /></a>
故事最终的结局，结被男主最终拯救，真的非常让人潸然泪下

整个故事最精华的部分对我来说确实就在于最后的结线，没想到作为一个肩负着拯救他人命运而从未来回到过去的结，完成使命后因果消失，本来也应该消失的结，被男主在其即将消失的时候再次将其送回过去，完美的符合因果，也为结提供了最后的希望，再次轮回，也就是故事的开始，结出现的时候。这次不仅仅背负了拯救佳织的使命，更无法将自己对男主秋山奏的感情表现出来，一个人承担了所有的痛苦。前面也提到过，这里是结的视点，从结的视点了解到很多之前一直存有疑问的事情，虽然她爱男主爱得不能自拔，这种无奈和冲突反复刺激着我的感官，但她依然选择完成自己的使命，牺牲了自己，不过还是留下了信息，大人版的爱理也回到过去，放走了心爱的男主，给了男主关于结的提示。这里面错综复杂的感情交织在一起才是构成了故事的最动人的部分。
<del datetime="2014-03-05T08:32:44+00:00">表达不是很清晰，请勿喷</del>

虽然剧情部分有点感觉和大体有关时间的SF作品相似，但是一个好的故事又有什么可说的呢？很难想象这只是几年前的游戏，现在的很多游戏都没有达到这样的水平啊。
感觉现在关于时间的SF题材很容易出大作，比如石头门。一旦和时间搭上线，总是伴随着与因果敌对的故事，这种微小的反抗也正是故事的核心。

最后还要感谢TRUMPLE给我们带来了这么凄美的故事，赋予了一个完美的结局
另外当然还要感谢辛勤的汉化组！]]></content>
    <summary type="html"><![CDATA[首先说说感想，太赞！
另外听说要动画化了，超期待！！！

深琦暮人和黑谷忍人设，图片出处官网: <a href="http://ushinawareta-mirai.com/" title="失われた未来を求めて" target="_blank">http://ushinawareta-mirai.com/</a>]]></summary>

    <category term="galgame" scheme="http://blog.tengattack.com/tags/galgame/" />
  </entry>
  <entry>
    <title>Tiny Dungeon 1-4 通关感想</title>
    <link href="http://blog.tengattack.com/2014/02/10/tiny-dungeon-1-4/" />
    <id>http://blog.tengattack.com/2014/02/10/tiny-dungeon-1-4/</id>
    <published>2014-02-09T19:00:46.000Z</published>
    <updated>2014-02-09T19:04:52.000Z</updated>

    <content type="html"><![CDATA[前一阵子难得回家一趟，趁着休息推完了这4部，其实根本算不上4部，只是硬生生把1部拆成4部…………

最先开始吸引我的是在别处看到的游戏里的一张CG:
<a href="/uploads/2014/02/00000068.png"><img src="/uploads/2014/02/00000068.png" alt="00000068" width="1286" height="749" class="alignnone size-full wp-image-856" /></a>

啊啊，感觉实在是太棒了……

在你打算推之前，我在这里要先强调：
<strong>米娅不能推! 米娅不能推!</strong>
因为很重要，所以我要说2遍。

<del datetime="2014-02-09T18:04:28+00:00">但是截至我发这个记录的时候，刚刚才知道还要出续作，明明都已经完结了，Rosebleu你还要炒冷饭！！！</del>

(以下内容含剧透)
<!--more-->

先来整体说说吧，这个游戏怎么说好呢，现在已经有4部了（？），感觉在场景和BGM切换上都有点生硬，而且有时候感觉BGM不怎么适合。
唯一值得称赞的就是战斗的过程，叙述的比较好，但是你一个galgame战斗这么好干什么呀喂!
男主名字是姫，<strong>人称推土姬</strong>，简直丧心病狂，每一部不同线的区别就在于先推谁，总之大家都是要被推的，先后问题。<strong>但是，米娅不能推! 米娅不能推!</strong>
魔族公主贝露，只娇不傲。
神族公主诺特，好软啊呼啊呼啊！
龙族公主兀露露，合法萝莉。
人族妹子红，想不出怎么描述好，感觉特点是有，但是仔细想想好像大家也有……
还有魔族No.2龙魔红刃，枫妹子，头上的丝带才是本体！！最近特别萌头上有丝带的，比如说天江衣、千棘等。
神族第二公主阿弥亚，小萝莉，整天调戏姐姐诺特。
另外还有龙族灭界战争的经历者，现为龙族王女兀露露的女仆欧佩拉，经常调戏男主w
卡米希亚，上层世界住人，夏露成熟版，称呼男主为爸爸，居然连女儿都推了，不愧为推土姬……
米娅，上层世界住人，<strong>米娅不能推! 米娅不能推!</strong>

<h3>第一部 Tiny Dungeon－BLACK and WHITE</h3>

第一部主要讲的是故事的背景和贝露线的魔族篇，讲述了男主和贝露之间的羁绊，虽然隐隐约约能在前文中猜到一点，但是确实最后有点小吃惊，整体来说剧本的大方向挺好的，但是细节做的不够好。
我和你说，不傲只娇的贝露实在是太赞了。
<a href="/uploads/2014/02/00000075.png"><img src="/uploads/2014/02/00000075.png" alt="00000075" width="800" height="466" class="alignnone size-full wp-image-857" /></a>
以及最后神族公主被男主亲手杀掉……（<del datetime="2014-02-09T18:04:28+00:00">推完就杀掉</del>）
<a href="/uploads/2014/02/00000095.png"><img src="/uploads/2014/02/00000095.png" alt="00000095" width="800" height="466" class="alignnone size-full wp-image-858" /></a>

<h3>第二部 Tiny Dungeon－BLESS of DRAGON</h3>

第二部主要讲的是兀露露的龙族篇。主要讲述了龙族的一些事情，以及兀露露和枫妹子的故事。
兀露露为了结束战争统一龙族亲手将父母杀死，非常动人，可惜感觉剧本上火候不够，没有写出该有的感觉。
枫的龙族母亲因打算泄密而被龙族内部处死，因此她对此一直对龙族怀恨在心。
<a href="/uploads/2014/02/td2_00000037.png"><img src="/uploads/2014/02/td2_00000037.png" alt="td2_00000037" width="800" height="466" class="alignnone size-full wp-image-862" /></a>

米娅在这部中首次登场：
<a href="/uploads/2014/02/td2_00000006.png"><img src="/uploads/2014/02/td2_00000006.png" alt="td2_00000006" width="800" height="466" class="alignnone size-full wp-image-861" /></a>
<strong>但是，米娅不能推! 米娅不能推!</strong>

<h3>第三部 Tiny Dungeon－BIRTH for YOURS</h3>

第三部主要讲的是诺特的神族篇。主要讲述了 神族在灭界战争中开发的非人道兵器和因此而诞生的「完全银发」诺特 的最终解开心结的故事。
人族妹子红因为渴望力量而走上了邪道，最终被男主亲手杀掉。题图的那张CG就是在这一部中出现。
<a href="/uploads/2014/02/td3_00000045.png"><img src="/uploads/2014/02/td3_00000045.png" alt="td3_00000045" width="800" height="466" class="alignnone size-full wp-image-864" /></a>

卡米希亚在这部中登场，女儿长大了好棒！啊啊啊！
<a href="/uploads/2014/02/td3_00000032.png"><img src="/uploads/2014/02/td3_00000032.png" alt="td3_00000032" width="800" height="466" class="alignnone size-full wp-image-863" /></a>

<h3>第四部 Tiny Dungeon－BRAVE or SLAVE</h3>

第四部主要讲的是勇者的故事，主要讲述了男主一直想成为勇者，和灭界战争中的勇者源相遇，源为了拯救自己的女儿米娅而不惜舍弃勇者的身份与世界对抗的故事。
这一部中由于卡米希亚的原因，大家都获得了之前三扇门的记忆，简直是开挂……
<del datetime="2014-02-09T18:04:28+00:00">拉隆最后也傲娇了一把，哎哟我的妈呀……</del>

卡米希亚简直赞!
<a href="/uploads/2014/02/td4_00000015.png"><img src="/uploads/2014/02/td4_00000015.png" alt="td4_00000015" width="800" height="466" class="alignnone size-full wp-image-865" /></a>

<a href="/uploads/2014/02/td4_00000109.png"><img src="/uploads/2014/02/td4_00000109.png" alt="td4_00000109" width="800" height="466" class="alignnone size-full wp-image-866" /></a>
女儿都托付给我了，为何不让我推!!!

<a href="/uploads/2014/02/td4_00000110.png"><img src="/uploads/2014/02/td4_00000110.png" alt="td4_00000110" width="800" height="466" class="alignnone size-full wp-image-867" /></a>
男主最后成为勇者，许愿把卡米希亚和米娅留了下来，<strong>但是，米娅不能推! 米娅不能推!</strong>

<h3>结束</h3>
啊啊，如果你看完上面的内容，一定非常明白我对米娅不能推的事情有多怨念！看看即将要出的下一部有没有机会推了。
最后，要感谢Rosebleu和汉化组的各位，废萌后宫倒贴实在是太赞了！

另外，这是新作的情报：
<a href="/uploads/2014/02/main_visual.jpg"><img src="/uploads/2014/02/main_visual.jpg" alt="main_visual" width="960" height="703" class="alignnone size-full wp-image-869" /></a>
<del datetime="2014-02-09T19:03:50+00:00"><strong>咦，人设有点奇怪</strong></del>

那就这样，游戏只是简单介绍了一下，虽然一直都在说细节不够好，但是如果大家有兴趣最好还是自己玩一下。
]]></content>
    <summary type="html"><![CDATA[前一阵子难得回家一趟，趁着休息推完了这4部，其实根本算不上4部，只是硬生生把1部拆成4部…………

最先开始吸引我的是在别处看到的游戏里的一张CG:
<a href="/uploads/2014/02/00000068.png"><img src="/uploads/2014/02/00000068.png" alt="00000068" width="1286" height="749" class="alignnone size-full wp-image-856" /></a>]]></summary>

    <category term="galgame" scheme="http://blog.tengattack.com/tags/galgame/" />
  </entry>
  <entry>
    <title>世界线变动率探测仪</title>
    <link href="http://blog.tengattack.com/2014/01/04/divergence-meter/" />
    <id>http://blog.tengattack.com/2014/01/04/divergence-meter/</id>
    <published>2014-01-04T10:59:43.000Z</published>
    <updated>2014-01-04T11:20:56.000Z</updated>

    <content type="html"><![CDATA[从电路到实际，各种折腾了这么久，总算是完成了
<del datetime="2014-01-04T10:52:04+00:00">树莓派还被玩脱了烧掉了，好忧伤啊</del>

不过确实效果做出来实在是太赞了
<!--more-->
<img src="http://io.tengattack.com/nixie/nixie_all.gif" alt="演示" />

现在可以显示时间、日期和一个固定的数值（世界线），嘛，想显示什么都可以啦，还有一些空余的接口可以用来扩展，做出来之后真的感觉超自豪。
其实世界线的原理在我看来相当简单，我在这个世界线上选的是这个数字，但是另外的世界线上的我选的不是这个数字，所以就是世界线了，关键就在于这个数字的确定过程是一个随机混沌的过程（在意什么理论啊喂）。

这里要非常感谢给了我很多意见的辉光钟之家的严泽远大牛，和帮我做了外壳的学长，以及其他的给我指导的人。真的是太感谢了。

不过这个电路设计的还是存在着很多问题，如果有机会再做一个的话一定会做的更好，厚度也能减少一半，现在这个大的底部高度全是因为中间用洞洞板加了个修正层的电路，真是蛋疼，不过外面看不到还好……]]></content>
    <summary type="html"><![CDATA[从电路到实际，各种折腾了这么久，总算是完成了
<del datetime="2014-01-04T10:52:04+00:00">树莓派还被玩脱了烧掉了，好忧伤啊</del>

不过确实效果做出来实在是太赞了

<img src="http://io.tengattack.com/nixie/nixie_all.gif" alt="演示" />]]></summary>

    <category term="device" scheme="http://blog.tengattack.com/tags/device/" />
    <category term="nixie" scheme="http://blog.tengattack.com/tags/nixie/" />
  </entry>
  <entry>
    <title>Altium Designer的3D预览效果超帅的！！</title>
    <link href="http://blog.tengattack.com/2013/12/11/altium-designer-3d-effect/" />
    <id>http://blog.tengattack.com/2013/12/11/altium-designer-3d-effect/</id>
    <published>2013-12-11T12:31:03.000Z</published>
    <updated>2013-12-11T12:31:04.000Z</updated>

    <content type="html"><![CDATA[画了好久终于有点像样了：
<a href="/uploads/2013/12/f2.png"><img src="/uploads/2013/12/f2.png" alt="f2" width="1567" height="728" class="alignnone size-full wp-image-843" /></a>
超帅的感觉！

另外，一开始电感的封装搞错了，AD10里默认没有这种封装，结果摆在了那个位置，现在换回来之后懒得改了，挤一挤吧，反正如果印出来的话也是在反面，看不到]]></content>
    <summary type="html"><![CDATA[画了好久终于有点像样了：
<a href="/uploads/2013/12/f2.png"><img src="/uploads/2013/12/f2.png" alt="f2" width="1567" height="728" class="alignnone size-full wp-image-843" /></a>]]></summary>

    <category term="nixie" scheme="http://blog.tengattack.com/tags/nixie/" />
    <category term="PCB" scheme="http://blog.tengattack.com/tags/pcb/" />
  </entry>
  <entry>
    <title>Raspberry Pi上为python安装gevent</title>
    <link href="http://blog.tengattack.com/2013/10/01/install-gevent-on-raspberry-pi/" />
    <id>http://blog.tengattack.com/2013/10/01/install-gevent-on-raspberry-pi/</id>
    <published>2013-10-01T08:24:30.000Z</published>
    <updated>2013-10-01T08:24:30.000Z</updated>

    <content type="html"><![CDATA[最近为了方便使用GPIO折腾，入手了一个树莓派:
<a href="/uploads/2013/10/IMG_3148.jpg"><img src="/uploads/2013/10/IMG_3148.jpg" alt="IMG_3148" width="1024" height="768" class="alignnone size-full wp-image-831" /></a>
<!--more-->

由于一些众所周知的原因，打算装个gevent
但是发现直接使用apt-get安装的无法使用，会提示Segmentation fault

于是就在网上搜索，发现此处记录了可以使用pip的方式安装:
<a href="http://www.lpfrx.com/archives/4548/" target="_blank">http://www.lpfrx.com/archives/4548/</a>

但是没有给出具体的步骤，既然装了，我就顺便把步骤贴出来当记录一下好了。

[code lang="shell"]
$ sudo apt-get install python-dev
$ sudo easy_install -U distribute
$ sudo apt-get install python-pip
$ sudo apt-get install libevent-dev
$ sudo pip install gevent
[/code]

然后就可以使用了~
]]></content>
    <summary type="html"><![CDATA[最近为了方便使用GPIO折腾，入手了一个树莓派:
<a href="/uploads/2013/10/IMG_3148.jpg"><img src="/uploads/2013/10/IMG_3148.jpg" alt="IMG_3148" width="1024" height="768" class="alignnone size-full wp-image-831" /></a>]]></summary>

    <category term="device" scheme="http://blog.tengattack.com/tags/device/" />
    <category term="python" scheme="http://blog.tengattack.com/tags/python/" />
    <category term="RaspberryPi" scheme="http://blog.tengattack.com/tags/raspberrypi/" />
  </entry>
</feed>
